schema {
  query: Query
  mutation: Mutation
}
type Mutation {
  createEstimator(data: EstimatorCreateInput!): Estimator

  updateEstimator(
    where: EstimatorWhereInput!
    data: EstimatorUpdateInput # operation: EstimatorOperationInput
  ): Estimator

  deleteEstimator(where: EstimatorWhereInput!): Estimator

  createEstimatorSpec(data: EstimatorSpecCreateInput!): EstimatorSpec

  updateEstimatorSpec(
    where: EstimatorSpecWhereInput!
    data: EstimatorSpecUpdateInput # operation: EstimatorSpecificationsOperationInput
  ): EstimatorSpec

  deleteEstimatorSpec(where: EstimatorSpecWhereInput!): EstimatorSpec

  createContract(data: ContractCreateInput!): Contract

  updateContract(contractId: ID!, data: ContractUpdateInput): Contract

  deleteContract(contractId: ID!, data: ContractDeleteInput): Contract

  createContractItem(data: ContractItemCreateInput!): ContractItem

  updateContractItem(
    where: ContractItemWhereInput!
    data: ContractItemUpdateInput
  ): ContractItem

  deleteContractItem(where: ContractItemWhereInput!): ContractItem

  createContractJobCost(data: ContractJobCostCreateInput!): ContractJobCost

  updateContractJobCost(
    where: ContractJobCostWhereInput!
    data: ContractJobCostUpdateInput
  ): ContractJobCost

  deleteContractJobCost(where: ContractJobCostWhereInput): ContractJobCost

  createContractTerm(data: ContractTermCreateInput!): ContractTerm

  updateContractTerm(
    where: ContractTermWhereInput!
    data: ContractTermUpdateInput
  ): ContractTerm

  deleteContractTerm(where: ContractTermWhereInput!): ContractTerm

  createCustomer(data: CustomerCreateInput!): Customer

  updateCustomer(customerId: String!, data: CustomerUpdateInput): Customer

  deleteCustomer(customerId: String!): Customer

  createEstimate(data: EstimateCreateInput!): Estimate

  updateEstimate(estimateId: String!, data: EstimateUpdateInput): Estimate

  deleteEstimate(estimateId: String!, data: EstimateDeleteInput): Estimate

  createEstimateItem(data: EstimateItemCreateInput!): EstimateItem

  updateEstimateItem(
    where: EstimateItemWhereInput!
    data: EstimateItemUpdateInput
  ): EstimateItem

  deleteEstimateItem(where: EstimateItemWhereInput!): EstimateItem

  createEstimateJobCost(data: EstimateJobCostCreateInput!): EstimateJobCost

  updateEstimateJobCost(
    where: EstimateJobCostWhereInput!
    data: EstimateJobCostUpdateInput
  ): EstimateJobCost

  deleteEstimateJobCost(where: EstimateJobCostWhereInput!): EstimateJobCost

  createEstimateTerm(data: EstimateTermCreateInput!): EstimateTerm

  updateEstimateTerm(
    where: EstimateTermWhereInput!
    data: EstimateTermUpdateInput
  ): EstimateTerm

  deleteEstimateTerm(where: EstimateTermWhereInput!): EstimateTerm

  createInstallationTerm(data: InstallationTermCreateInput!): InstallationTerm

  updateInstallationTerm(
    termId: ID!
    data: InstallationTermUpdateInput
  ): InstallationTerm

  deleteInstallationTerm(termId: ID!): InstallationTerm

  createProduct(data: ProductCreateInput!): Product

  updateProduct(itemId: ID!, data: ProductUpdateInput): Product

  deleteProduct(itemId: ID!): Product

  createJobCost(data: JobCostCreateInput!): JobCost

  updateJobCost(costId: ID!, data: JobCostUpdateInput): JobCost

  deleteJobCost(costId: ID!): JobCost

  createEstimatorLayout(data: EstimatorLayoutCreateInput!): EstimatorLayout

  updateEstimatorLayout(
    where: EstimatorLayoutWhereInput!
    data: EstimatorLayoutUpdateInput
  ): EstimatorLayout

  deleteEstimatorLayout(where: EstimatorLayoutWhereInput!): EstimatorLayout

  createOrder(data: OrderCreateInput!): Order

  updateOrder(orderId: ID!, data: OrderUpdateInput): Order

  deleteOrder(orderId: ID!, data: OrderDeleteInput): Order

  createOrderItem(data: OrderItemCreateInput!): OrderItem

  updateOrderItem(where: OrderItemWhereInput!): OrderItem

  deleteOrderItem(where: OrderItemWhereInput!): OrderItem

  createQuote(data: QuoteCreateInput!): Quote

  updateQuote(quoteId: ID!, data: QuoteUpdateInput): Quote

  deleteQuote(quoteId: ID!, data: QuoteDeleteInput): Quote

  createQuoteItem(data: QuoteItemCreateInput!): QuoteItem

  updateQuoteItem(
    where: QuoteItemWhereInput!
    data: QuoteItemUpdateInput
  ): QuoteItem

  deleteQuoteItem(where: QuoteItemWhereInput!): QuoteItem

  createUser(data: UserCreateInput!): User

  updateUser(where: UserWhereInput!, data: UserUpdateInput): User

  deleteUser(where: UserWhereInput!): User

  createQuoteId(data: QuoteIdCreateInput!): QuoteId

  deleteQuoteId(quoteId: String!): QuoteId

  createOrderId(data: OrderIdCreateInput!): OrderId

  deleteOrderId(orderId: String!): OrderId

  createEstimateId(data: EstimateIdCreateInput!): EstimateId

  deleteEstimateId(estimateId: String!): EstimateId

  createContractId(data: ContractIdCreateInput!): ContractId

  deleteContractId(contractId: ID!): ContractId
}

type Query {
  getImageUploadUrl(extension: String, contentType: String): AWSURL!

  getEstimator(where: EstimatorWhereInput!): Estimator

  listEstimators(
    where: EstimatorWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): EstimatorsPage!

  # countEstimators(where: EstimatorWhereInput, skip: Int, take: Int): Int

  getEstimatorSpec(where: EstimatorSpecWhereInput!): EstimatorSpec

  # countEstimatorSpecifications(
  #   where: EstimatorSpecWhereInput
  #   skip: Int
  #   take: Int
  # ): Int

  getContract(contractId: ID!): Contract

  listContracts(
    contractId: ID
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): ContractsPage!
  #
  # countContracts(contractId: ID, skip: Int, take: Int): Int

  getContractItem(where: ContractItemWhereInput!): ContractItem

  listContractItems(
    where: ContractItemWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): ContractItemsPage!

  # countContractItems(where: ContractItemWhereInput, skip: Int, take: Int): Int

  getContractJobCost(where: ContractJobCostWhereInput!): ContractJobCost

  listContractJobCosts(
    where: ContractJobCostWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): ContractJobCostsPage!

  # countContractJobCosts(
  #   where: ContractJobCostWhereInput
  #   skip: Int
  #   take: Int
  # ): Int

  getContractTerm(where: ContractTermWhereInput!): ContractTerm

  listContractTerms(
    where: ContractTermWhereInput!
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): ContractTermsPage!

  # countContractTerms(where: ContractTermWhereInput, skip: Int, take: Int): Int

  getCustomer(customerId: String!): Customer

  listCustomers(
    customerId: String
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): CustomersPage!

  # countCustomers(customerId: String, skip: Int, take: Int): Int

  getEstimate(estimateId: String!): Estimate

  listEstimates(
    estimateId: String
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): EstimatesPage!

  # countEstimates(estimateId: String, skip: Int, take: Int): Int

  getEstimateItem(where: EstimateItemWhereInput!): EstimateItem

  listEstimateItems(
    where: EstimateItemWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): EstimateItemsPage!

  # countEstimateItems(where: EstimateItemWhereInput, skip: Int, take: Int): Int

  getEstimateJobCost(where: EstimateJobCostWhereInput!): EstimateJobCost

  listEstimateJobCosts(
    where: EstimateJobCostWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): EstimateJobCostsPage!

  # countEstimateJobCosts(
  #   where: EstimateJobCostWhereInput
  #   skip: Int
  #   take: Int
  # ): Int

  getEstimateTerm(where: EstimateTermWhereInput!): EstimateTerm

  listEstimateTerms(
    where: EstimateTermWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): EstimateTermsPage!

  # countEstimateTerms(where: EstimateTermWhereInput, skip: Int, take: Int): Int

  getInstallationTerm(termId: ID!): InstallationTerm

  listInstallationTerms(
    termId: ID
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): InstallationTermsPage!

  # countInstallationTerms(
  #   termId: ID!
  #   skip: Int
  #   take: Int
  # ): Int

  getProduct(itemId: ID!): Product

  listProducts(
    itemId: ID
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): ProductsPage!

  # countProducts(itemId: ID, skip: Int, take: Int): Int

  getJobCost(costId: ID!): JobCost

  listJobCosts(
    costId: ID
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): JobCostsPage!

  # countJobCosts(costId: ID, skip: Int, take: Int): Int

  getEstimatorLayout(where: EstimatorLayoutWhereInput!): EstimatorLayout

  # countEstimatorLayouts(
  #   where: EstimatorLayoutWhereInput
  #   skip: Int
  #   take: Int
  # ): Int

  getOrder(orderId: ID!): Order

  listOrders(
    orderId: ID
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): OrdersPage!

  # countOrders(orderId: ID, skip: Int, take: Int): Int

  getOrderItem(where: OrderItemWhereInput!): OrderItem
  getOrderItemsByOrderId(orderId: ID!): OrderItemsPage

  listOrderItems(
    where: OrderItemWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): OrderItemsPage!

  # countOrderItems(where: OrderItemWhereInput, skip: Int, take: Int): Int

  getQuote(quoteId: ID!): Quote

  listQuotes(
    quoteId: ID
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): QuotesPage!

  # countQuotes(quoteId: ID, skip: Int, take: Int): Int

  getQuoteItem(where: QuoteItemWhereInput!): QuoteItem

  listQuoteItems(
    where: QuoteItemWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): QuoteItemsPage!

  # countQuoteItems(where: QuoteItemWhereInput, skip: Int, take: Int): Int

  getUser(where: UserWhereInput!): User

  listUsers(
    where: UserWhereInput
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): UsersPage!

  getQuoteId(quoteId: String!): QuoteId

  listQuoteIds(
    quoteId: String
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): QuoteIdsPage!

  getOrderId(orderId: String!): OrderId

  listOrderIds(
    orderId: String
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): OrderIdsPage!

  getEstimateId(estimateId: String!): EstimateId

  listEstimateIds(
    estimateId: String
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): EstimateIdsPage!

  getContractId(contractId: ID!): ContractId

  listContractIds(
    contractId: ID
    skip: Int
    take: Int
    limit: Int
    nextToken: String
  ): ContractIdsPage!

  # countUsers(where: UserWhereInput, skip: Int, take: Int): Int
}

# Resource Types
type User {
  userId: ID!
  lastName: String!
  firstName: String!
  middleInitial: String
  phone: String
  email: AWSEmail!
  hireDate: AWSDateTime!
  isActive: Boolean
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  birthdate: AWSDate
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type UsersPage {
  users: [User]
  nextToken: String
}

input UserWhereInput {
  userId: String
  email: AWSEmail
}

input UserCreateInput {
  userId: String
  lastName: String!
  firstName: String!
  middleInitial: String
  phone: String
  email: AWSEmail!
  hireDate: AWSDateTime!
  isActive: Boolean
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  birthdate: AWSDate
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
}

input UserUpdateInput {
  lastName: String
  firstName: String
  middleInitial: String
  phone: String
  email: AWSEmail
  hireDate: AWSDateTime
  isActive: Boolean
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  birthdate: AWSDate
  dateUpdated: AWSDateTime
}

type Customer {
  customerId: ID!
  name: String!
  customerType: String!
  address: String!
  city: String!
  state: String!
  zipcode: String!
  contactName: String
  contactEmail: String
  website: String
  source: String
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  phone: String
  priceLevel: String
}
type CustomersPage {
  customers: [Customer]
  nextToken: String
}

input CustomerCreateInput {
  customerId: ID!
  name: String!
  customerType: String!
  address: String!
  city: String!
  state: String!
  zipcode: String!
  contactName: String
  contactEmail: String
  website: String
  source: String
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  phone: String
  priceLevel: String
}

input CustomerUpdateInput {
  name: String
  customerType: String
  address: String
  city: String
  state: String
  zipcode: String
  contactName: String
  contactEmail: String
  website: String
  source: String
  dateUpdated: AWSDateTime
  phone: String
  priceLevel: String
}

type Product {
  itemId: ID!
  category: String!
  name: String!
  color: String!
  diameter: String
  gauge: String
  height: Float
  width: Float
  upright: Float
  type: String
  uom: String
  length: Float
  roundup: Int
  accountingId: String
  vendorId: String
  preferredVendor: String
  rail: String
  model: String
  frame: String
  mesh: String
  selvage: String
  stock: Boolean!
  location: String
  weight: Float
  cost: Float!
  classType: String
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  gateType: String
  hardwareFunction: String
  func: String
}
type ProductsPage {
  products: [Product]
  nextToken: String
}

input ProductCreateInput {
  itemId: ID!
  category: String!
  name: String!
  color: String!
  diameter: String
  gauge: String
  height: Float
  width: Float
  upright: Float
  type: String
  uom: String
  length: Float
  roundup: Int
  accountingId: String
  vendorId: String
  preferredVendor: String
  rail: String
  model: String
  frame: String
  mesh: String
  selvage: String
  stock: Boolean
  location: String
  weight: Float
  cost: Float!
  classType: String
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
  gateType: String
  hardwareFunction: String
  func: String
}

input ProductUpdateInput {
  itemId: String
  category: String
  name: String
  color: String
  diameter: String
  gauge: String
  height: Float
  width: Float
  upright: Float
  type: String
  uom: String
  length: Float
  roundup: Int
  accountingId: String
  vendorId: String
  preferredVendor: String
  rail: String
  model: String
  frame: String
  mesh: String
  selvage: String
  stock: Boolean
  location: String
  weight: Float
  cost: Float
  classType: String
  dateUpdated: AWSDateTime
  gateType: String
  hardwareFunction: String
  func: String
}

type QuoteId {
  quoteId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type QuoteIdsPage {
  quoteIds: [QuoteId]
  nextToken: String
}

input QuoteIdCreateInput {
  quoteId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}

type OrderId {
  orderId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type OrderIdsPage {
  orderIds: [OrderId]
  nextToken: String
}

input OrderIdCreateInput {
  orderId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}

type EstimateId {
  estimateId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type EstimateIdsPage {
  estimateIds: [EstimateId]
  nextToken: String
}

input EstimateIdCreateInput {
  estimateId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}

type ContractId {
  contractId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type ContractIdsPage {
  contractIds: [ContractId]
  nextToken: String
}

input ContractIdCreateInput {
  contractId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}

type JobCost {
  costId: ID!
  name: String!
  type: String!
  rate: Float!
  rateType: String!
  jobType: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type JobCostsPage {
  jobCosts: [JobCost]
  nextToken: String
}

input JobCostCreateInput {
  costId: String!
  name: String!
  type: String!
  rate: Float!
  rateType: String!
  jobType: String!
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
}

input JobCostUpdateInput {
  name: String
  type: String
  rate: Float
  rateType: String
  jobType: String
  dateUpdated: AWSDateTime
}

type InstallationTerm {
  termId: ID!
  type: String!
  jobType: String
  class: String!
  description: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime!
}
type InstallationTermsPage {
  installationTerms: [InstallationTerm]
  nextToken: String
}

input InstallationTermCreateInput {
  termId: ID!
  type: String!
  jobType: String
  class: String!
  description: String!
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
}

input InstallationTermUpdateInput {
  type: String
  jobType: String
  class: String
  description: String
  dateUpdated: AWSDateTime
}

#Utility Types
type Estimator {
  estimatorId: String!
  transactionId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type EstimatorsPage {
  estimators: [Estimator]
  nextToken: String
}

input EstimatorWhereInput {
  estimatorId: String
  transactionId: String
}

input EstimatorCreateInput {
  estimatorId: String!
  transactionId: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}

input EstimatorUpdateInput {
  transactionId: String!
  dateUpdated: AWSDateTime
}

type EstimatorSpec {
  estimatorId: String!
  transactionId: String!
  class: String
  color: String
  height: Float
  gauge: String
  mesh: String
  selvage: String
  chainlinkId: String
  topRailType: String
  midRailCount: Int
  bottomRailType: String
  braceRailBool: Boolean
  trussRodsBool: Boolean
  terminalPostDiameter: String
  terminalPostGauge: String
  terminalPostId: String
  terminalPostLength: Float
  linePostDiameter: String
  linePostGauge: String
  linePostId: String
  linePostLength: Float
  railPipeDiameter: String
  railPipeGauge: String
  railPipeId: String
  railPipeLength: Float
  maxSectionSpacingFeet: Int
  platedPostsBool: Boolean
  barbwireBool: Boolean
  razorBool: Boolean
  tensionwireId: String
  hogRingsId: String
  tiesPerRail: Int
  tiesPerRailLine: Int
  tensionBandPerHookup: Int
  braceBandPerHookup: Int
  barbarmId: String
  barbwireId: String
  baseId: String
  boltId: String
  concreteId: String
  linetieId: String
  loopId: String
  railEndId: String
  railTieId: String
  razorId: String
  tensionBarId: String
  terminalBraceId: String
  terminalCapId: String
  ternminalTensionId: String
  trussRodId: String
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}

input EstimatorSpecWhereInput {
  estimatorId: String!
  transactionId: String!
}

input EstimatorSpecCreateInput {
  estimatorId: String!
  transactionId: String!
  class: String
  color: String
  height: Float
  gauge: String
  mesh: String
  selvage: String
  chainlinkId: String
  topRailType: String
  midRailCount: Int
  bottomRailType: String
  braceRailBool: Boolean
  trussRodsBool: Boolean
  terminalPostDiameter: String
  terminalPostGauge: String
  terminalPostId: String
  terminalPostLength: Float
  linePostDiameter: String
  linePostGauge: String
  linePostId: String
  linePostLength: Float
  railPipeDiameter: String
  railPipeGauge: String
  railPipeId: String
  railPipeLength: Float
  maxSectionSpacingFeet: Int
  platedPostsBool: Boolean
  barbwireBool: Boolean
  razorBool: Boolean
  tensionwireId: String
  hogRingsId: String
  tiesPerRail: Int
  tiesPerRailLine: Int
  tensionBandPerHookup: Int
  braceBandPerHookup: Int
  barbarmId: String
  barbwireId: String
  baseId: String
  boltId: String
  concreteId: String
  linetieId: String
  loopId: String
  railEndId: String
  railTieId: String
  razorId: String
  tensionBarId: String
  terminalBraceId: String
  terminalCapId: String
  ternminalTensionId: String
  trussRodId: String
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}

input EstimatorSpecUpdateInput {
  estimatorId: String!
  transactionId: String!
  class: String
  color: String
  height: Float
  gauge: String
  mesh: String
  selvage: String
  chainlinkId: String
  topRailType: String
  midRailCount: Int
  bottomRailType: String
  braceRailBool: Boolean
  trussRodsBool: Boolean
  terminalPostDiameter: String
  terminalPostGauge: String
  terminalPostId: String
  terminalPostLength: Float
  linePostDiameter: String
  linePostGauge: String
  linePostId: String
  linePostLength: Float
  railPipeDiameter: String
  railPipeGauge: String
  railPipeId: String
  railPipeLength: Float
  maxSectionSpacingFeet: Int
  platedPostsBool: Boolean
  barbwireBool: Boolean
  razorBool: Boolean
  tensionwireId: String
  hogRingsId: String
  tiesPerRail: Int
  tiesPerRailLine: Int
  tensionBandPerHookup: Int
  braceBandPerHookup: Int
  barbarmId: String
  barbwireId: String
  baseId: String
  boltId: String
  concreteId: String
  linetieId: String
  loopId: String
  railEndId: String
  railTieId: String
  razorId: String
  tensionBarId: String
  terminalBraceId: String
  terminalCapId: String
  ternminalTensionId: String
  trussRodId: String
  dateUpdated: AWSDateTime
}

type EstimatorLayout {
  estimatorId: String!
  transactionId: String!
  totalFootage: Float!
  totalLines: Int!
  totalEnds: Int!
  totalCorners: Int!
  totalHookups: Int!
  totalTieIns: Int!
  runsArray: [Int]
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime!
}

input EstimatorLayoutWhereInput {
  estimatorId: String!
  transactionId: String!
}

input EstimatorLayoutCreateInput {
  estimatorId: String!
  transactionId: String!
  totalFootage: Float
  totalLines: Int
  totalEnds: Int
  totalCorners: Int
  totalHookups: Int
  totalTieIns: Int
  runsArray: [Int]
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
}

input EstimatorLayoutUpdateInput {
  estimatorId: String
  transactionId: String
  totalFootage: Float
  totalLines: Int
  totalEnds: Int
  totalCorners: Int
  totalHookups: Int
  totalTieIns: Int
  runsArray: [Int]
  dateUpdated: AWSDateTime
}

type Contract {
  contractId: ID!
  customerId: String!
  userId: String!
  totalContractProductCost: Float!
  totalContractProductTax: Float!
  totalContractProductPrice: Float!
  totalContactProductPrice: Float!
  totalContractJobCosts: Float
  totalContractManHours: Float
  totalContractCosts: Float
  totalContractProfit: Float
  totalContractContingency: Float
  totalContractPrice: Float
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  contractDate: String
  projectName: String
  priceLevel: String!
  status: String
  convertedDate: AWSDateTime
  source: String
  finalized: Int
  finalizedDate: AWSDateTime
}
type ContractsPage {
  contracts: [Contract]
  nextToken: String
}

input ContractCreateInput {
  contractId: String
  customerId: String
  userId: String
  totalContractProductCost: Float!
  totalContractProductTax: Float!
  totalContractProductPrice: Float!
  totalContactProductPrice: Float!
  totalContractJobCosts: Float
  totalContractManHours: Float
  totalContractCosts: Float
  totalContractProfit: Float
  totalContractContingency: Float
  totalContractPrice: Float
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  contractDate: String
  projectName: String
  priceLevel: String!
  status: String
  convertedDate: AWSDateTime
  source: String
  finalized: Int
  finalizedDate: AWSDateTime
  contractItems: [ContractItemCreateInput]
  contractJobCosts: [ContractJobCostCreateInput]
  contractTerms: [ContractTermCreateInput]
}

input ContractUpdateInput {
  customerId: String
  userId: String
  totalContractProductCost: Float!
  totalContractProductTax: Float!
  totalContractProductPrice: Float!
  totalContactProductPrice: Float!
  totalContractJobCosts: Float
  totalContractManHours: Float
  totalContractCosts: Float
  totalContractProfit: Float
  totalContractContingency: Float
  totalContractPrice: Float
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  contractDate: String
  projectName: String
  priceLevel: String!
  status: String
  convertedDate: AWSDateTime
  source: String
  finalized: Int
  finalizedDate: AWSDateTime
  contractItems: [ContractItemUpdateInput]
  contractJobCosts: [ContractJobCostUpdateInput]
  contractTerms: [ContractTermUpdateInput]
}

input ContractDeleteInput {
  itemIds: [String]
  costIds: [String]
  termIds: [String]
}

type ContractItem {
  contractId: String!
  itemId: String!
  quantity: Float!
  cost: Float!
  markup: Float!
  price: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  source: String
  color: String!
  name: String!
  rowId: Int!
  category: String!
  received: Int
  receivedDate: AWSDateTime
}

type ContractItemsPage {
  contractItems: [ContractItem]
  nextToken: String
}

input ContractItemWhereInput {
  contractId: String
  itemId: String
}

input ContractItemCreateInput {
  contractId: String!
  itemId: String!
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  source: String
  color: String!
  name: String!
  rowId: Int!
  category: String!
  received: Int
  receivedDate: AWSDateTime
}

input ContractItemUpdateInput {
  itemId: String!
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateUpdated: AWSDateTime
  source: String
  color: String!
  name: String!
  rowId: Int!
  category: String!
  received: Int
  receivedDate: AWSDateTime
}

type ContractJobCost {
  costId: String!
  contractId: String!
  name: String!
  crewQty: Int
  jobNote: String
  hours: Float!
  rate: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  equipQty: Float
  otherQty: Float
}
type ContractJobCostsPage {
  contractJobCosts: [ContractJobCost]
  nextToken: String
}

input ContractJobCostWhereInput {
  contractId: String!
  costId: String!
}

input ContractJobCostCreateInput {
  costId: String!
  contractId: String!
  name: String!
  crewQty: Int
  jobNote: String
  hours: Float!
  rate: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  equipQty: Float
  otherQty: Float
}

input ContractJobCostUpdateInput {
  costId: String
  name: String
  crewQty: Int
  jobNote: String
  hours: Float
  rate: Float
  total: Float
  dateUpdated: AWSDateTime
  equipQty: Float
  otherQty: Float
}

type ContractTerm {
  termId: String!
  contractId: String!
  description: String!
  type: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime!
}
type ContractTermsPage {
  contractTerms: [ContractTerm]
  nextToken: String
}

input ContractTermWhereInput {
  contractId: String!
  termId: String
}

input ContractTermCreateInput {
  contractId: String!
  termId: String!
  description: String!
  type: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime!
}

input ContractTermUpdateInput {
  contractId: String
  termId: String
  description: String
  type: String
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
}

type Estimate {
  estimateId: ID!
  customerId: String!
  userId: String!
  totalEstimateProductCost: Float!
  totalEstimateProductTax: Float!
  totalEstimateProductPrice: Float!
  totalEstimateProductProfit: Float!
  totalEstimateJobCosts: Float!
  totalEstimateContingency: Float
  totalEstimateProfit: Float!
  totalEstimatePrice: Float!
  totalEstimateManHours: Float
  status: String
  convertedDate: AWSDateTime
  source: String
  projectName: String
  priceLevel: String
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
}
type EstimatesPage {
  estimates: [Estimate]
  nextToken: String
}

input EstimateCreateInput {
  estimateId: ID!
  customerId: String!
  userId: String!
  totalEstimateProductCost: Float!
  totalEstimateProductTax: Float!
  totalEstimateProductPrice: Float!
  totalEstimateProductProfit: Float!
  totalEstimateJobCosts: Float!
  totalEstimateContingency: Float
  totalEstimateProfit: Float!
  totalEstimatePrice: Float!
  totalEstimateManHours: Float
  status: String
  convertedDate: AWSDateTime
  source: String
  projectName: String
  priceLevel: String
  estimateItems: [EstimateItemCreateInput]
  estimateJobCosts: [EstimateJobCostCreateInput]
  estimateTerms: [EstimateTermCreateInput]
}

input EstimateUpdateInput {
  customerId: String!
  userId: String!
  totalEstimateProductCost: Float!
  totalEstimateProductTax: Float!
  totalEstimateProductPrice: Float!
  totalEstimateProductProfit: Float!
  totalEstimateJobCosts: Float!
  totalEstimateContingency: Float
  totalEstimateProfit: Float!
  totalEstimatePrice: Float!
  totalEstimateManHours: Float
  status: String
  convertedDate: AWSDateTime
  source: String
  projectName: String
  priceLevel: String
  estimateItems: [EstimateItemUpdateInput]
  estimateJobCosts: [EstimateJobCostUpdateInput]
  estimateTerms: [EstimateTermUpdateInput]
}

input EstimateDeleteInput {
  itemIds: [String]
  costIds: [String]
  termIds: [String]
}

type EstimateItem {
  estimateId: String!
  itemId: String!
  quantity: Float!
  cost: Float!
  markup: Float!
  price: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  source: String!
  color: String
  name: String!
  rowId: Int!
  category: String
}
type EstimateItemsPage {
  estimateItems: [EstimateItem]
  nextToken: String
}

input EstimateItemWhereInput {
  estimateId: String
  itemId: String
}

input EstimateItemCreateInput {
  estimateId: String
  itemId: String
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  source: String
  color: String
  name: String
  rowId: Int
  category: String
}

input EstimateItemUpdateInput {
  estimateId: String
  itemId: String
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateUpdated: AWSDateTime
  source: String
  color: String
  name: String
  rowId: Int
  category: String
}

type EstimateJobCost {
  estimateId: String!
  costId: String!
  name: String!
  crewQty: Int
  jobNote: String
  hours: Float!
  rate: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  equipQty: Float
  otherQty: Float
}
type EstimateJobCostsPage {
  estimateJobCosts: [EstimateJobCost]
  nextToken: String
}

input EstimateJobCostWhereInput {
  estimateId: String
  costId: String
}

input EstimateJobCostCreateInput {
  estimateId: String!
  costId: String!
  name: String!
  crewQty: Int
  jobNote: String
  hours: Float!
  rate: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  equipQty: Float
  otherQty: Float
}

input EstimateJobCostUpdateInput {
  estimateId: String
  costId: String
  name: String
  crewQty: Int
  jobNote: String
  hours: Float
  rate: Float
  total: Float
  dateUpdated: AWSDateTime
  equipQty: Float
  otherQty: Float
}

type EstimateTerm {
  termId: String!
  estimateId: String!
  description: String!
  type: String!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime!
}
type EstimateTermsPage {
  estimateTerms: [EstimateTerm]
  nextToken: String
}

input EstimateTermWhereInput {
  termId: String!
  estimateId: String!
}

input EstimateTermCreateInput {
  estimateId: String!
  termId: String
  description: String!
  type: String!
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
}

input EstimateTermUpdateInput {
  estimateId: String
  termId: String
  description: String
  type: String
  dateUpdated: AWSDateTime
}

type Order {
  orderId: ID!
  customerId: String!
  userId: String!
  projectName: String
  priceLevel: String!
  totalOrderCost: Float!
  totalOrderTax: Float!
  totalOrderPrice: Float!
  totalOrderProfit: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  status: String
  convertedDate: AWSDateTime
  source: String
  finalized: Int
  finalizedDate: AWSDateTime
}
type OrdersPage {
  orders: [Order]
  nextToken: String
}

input OrderCreateInput {
  orderId: ID!
  customerId: String!
  userId: String!
  projectName: String
  priceLevel: String
  totalOrderCost: Float
  totalOrderTax: Float
  totalOrderPrice: Float
  totalOrderProfit: Float
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
  status: String
  convertedDate: AWSDateTime
  source: String
  finalized: Int
  finalizedDate: AWSDateTime
  orderItems: [OrderItemCreateInput]
}

input OrderUpdateInput {
  customerId: String
  userId: String
  projectName: String
  priceLevel: String
  totalOrderCost: Float
  totalOrderTax: Float
  totalOrderPrice: Float
  totalOrderProfit: Float
  dateUpdated: AWSDateTime
  status: String
  convertedDate: AWSDateTime
  source: String
  finalized: Int
  finalizedDate: AWSDateTime
  orderItems: [OrderItemUpdateInput]
}

input OrderDeleteInput {
  itemIds: [String]
}

type OrderItem {
  orderId: String!
  itemId: String!
  quantity: Float!
  cost: Float!
  markup: Float!
  price: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  source: String!
  color: String!
  name: String!
  rowId: Int!
  category: String
  received: Int
  receivedDate: AWSDateTime
}
type OrderItemsPage {
  orderItems: [OrderItem]
  nextToken: String
}

input OrderItemWhereInput {
  orderId: String!
  itemId: String!
}

input OrderItemCreateInput {
  orderId: String!
  itemId: String!
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
  source: String
  color: String!
  name: String!
  rowId: Int
  category: String
  received: Int
  receivedDate: AWSDateTime
}

input OrderItemUpdateInput {
  itemId: String
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateUpdated: AWSDateTime
  source: String
  color: String
  name: String
  rowId: Int
  category: String
  received: Int
  receivedDate: AWSDateTime
}

type Quote {
  quoteId: ID!
  customerId: String!
  userId: String!
  projectName: String
  priceLevel: String!
  totalQuoteCost: Float!
  totalQuoteTax: Float!
  totalQuotePrice: Float!
  totalQuoteProfit: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  status: String
  convertedDate: AWSDateTime
  source: String
}
type QuotesPage {
  quotes: [Quote]
  nextToken: String
}

input QuoteCreateInput {
  quoteId: String!
  customerId: String!
  userId: String!
  projectName: String
  priceLevel: String
  totalQuoteCost: Float
  totalQuoteTax: Float
  totalQuotePrice: Float
  totalQuoteProfit: Float
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
  status: String
  convertedDate: AWSDateTime
  source: String
  quoteItems: [QuoteItemCreateInput]
}

input QuoteUpdateInput {
  customerId: String
  userId: String
  projectName: String
  priceLevel: String
  totalQuoteCost: Float
  totalQuoteTax: Float
  totalQuotePrice: Float
  totalQuoteProfit: Float
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
  status: String
  convertedDate: AWSDateTime
  source: String
  quoteItems: [QuoteItemCreateInput]
}
input QuoteDeleteInput {
  itemIds: [String]
}

type QuoteItem {
  quoteId: String!
  itemId: String!
  quantity: Float!
  cost: Float!
  markup: Float!
  price: Float!
  total: Float!
  dateCreated: AWSDateTime!
  dateUpdated: AWSDateTime
  source: String!
  color: String!
  name: String!
  rowId: Int!
  category: String
}
type QuoteItemsPage {
  quoteItems: [QuoteItem]
  nextToken: String
}

input QuoteItemWhereInput {
  quoteId: String!
  itemId: String!
}

input QuoteItemCreateInput {
  quoteId: String!
  itemId: String!
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateCreated: AWSDateTime
  dateUpdated: AWSDateTime
  source: String
  color: String!
  name: String!
  rowId: Int
  category: String
}

input QuoteItemUpdateInput {
  itemId: String
  quantity: Float
  cost: Float
  markup: Float
  price: Float
  total: Float
  dateUpdated: AWSDateTime
  source: String
  color: String
  name: String
  rowId: Int
  category: String
}
